CREATE DATABASE [name];






\c [name]
to connect a database






DROP DATABASE [name];






\l 
list all databases






CREATE TABLE [IF NOT EXISTS] table_name (
   column1 datatype(length) column_contraint,
   column2 datatype(length) column_contraint,
   column3 datatype(length) column_contraint,
   table_constraints
);







\d 
see description of table_constraints







DROP TABLE [name];







INSERT operator:
INSERT INTO table_name(column1, column2, …)
VALUES (value1, value2, …);










SELECT * FROM [name];
to see all added values in table_constraints








SELECT [column name] FROM [name];
to see all added values in particular column to table









SELECT * FROM [column name] ORDER BY [name];
sorts value of that paricular column in acesding order








DISTINCT operator: 
SELECT DISTINCT [column name] FROM [name] ORDER BY [column name];
to remove duplicate elements





WHERE operator:
SELECT * FROM [name] WHERE [column name] = ['Value'];
to filter out table with a particular value







IN operator:
SELECT * FROM person WHERE country IN ('China', 'India', 'Brazil');
This is an alternative of OR operator.







BETWEEN operator:
SELECT * FROM person WHERE dob BETWEEN DATE '2000-01-01' AND '2015-01-01';











LIKE operator:
LIKE operator is used to match text values against a pattern using wildcards.
SELECT * FROM person WHERE email LIKE '%google.com';









ILIKE operator:
ILIKE operator makes the keyword value case insensitive
SELECT * FROM person WHERE country ILIKE 'p%';









GROUP BY keyword:
SELECT country,COUNT(*) FROM person GROUP BY country;
The COUNT(*) function used here is used to count the no. of values corresponding to entered value.










HAVING keyword:
SELECT country,COUNT(*) FROM person GROUP BY country HAVING COUNT(*) > 5 ORDER BY country;









MAX() function:
Used to select the maximum value of a column_name from a table.
SELECT MAX(price) FROM car;









MIN() function:
Used to select the minimum value of a column_name from a table.
SELECT MIN(price) FROM car;








AVG() function:
Used to select the average value of a column_name from a table.
SELECT AVG(price) FROM car;







ROUND() function:
Used to select the round off value of a column_name from a table.
SELECT ROUND(AVG(price)) FROM car;









SUM() function:
Used to sum over our datasets.
SELECT SUM(price) FROM car;
















COALESCE keyword:
The COALESCE keyword llows you to have a default value in-case the first one is not present.
SELECT * FROM person;
SELECT email FROM person;
SELECT COALESCE(email) FROM person;
SELECT COALESCE(email, 'email not present') FROM person;











NULLIF keyword:
The NULLIF keyword takes two argument and returns the first argument if the second argument is not equal to the first argument.
SELECT NULLIF(10, 10);
SELECT NULLIF(10, 20);












SELECT NOW();
Gives the current timestamp.









SELECT NOW()::DATE;
Gives us Date.











SELECT NOW()::TIME;
Gives the current Time.










ADDING AND SUBTRACTING WITH DATES:
SELECT NOW() - INTERVAL '10 YEARS';
















EXTRACTING FIELDS FROM TIMESTAMPS:
SELECT EXTRACT(YEAR FROM NOW());
SELECT EXTRACT(MONTH FROM NOW());
SELECT EXTRACT(DAY FROM NOW());













 SELECT * from person LIMIT 1;
 LIMIT aloows us to select a range of values under this.
 










Alerting a constraint:
ALTER TABLE person DROP CONSTRAINT person_pkey;











Deleting a record from table:
DELETE FROM person WHERE id = 1;












UNIQUE Constraint:
The UNIQUE Constraint allows us to have unique values for a given column.
ALTER TABLE person ADD CONSTRAINT unique_email_adderss UNIQUE (email);
It is different from primary key , as primary key allows a to identify a record in a table.















CHECK Constraint:
The CHECK Constraint allows us to add a constraint based upon the boolean values.
ALTER TABLE person ADD CONSTRAINT gender_constraint CHECK (gender = 'FEMALE' OR gender = 'MALE');

















UPDATE Command:
The UPDATE Command allows us to update a column or multiple columns based on the WHERE clause.
Providing WHERE clause helps you to have a control of what you are updating.
UPDATE person SET email = 'guptaakshat@gmail.com' where id = 1;














UPSERT :
The UPSERT statement is a DBMS feature that allows a DML statement’s author to either insert a row or if the row already exists, UPDATE that existing row instead. That is why the action is known as UPSERT (simply a mix of Update and Insert).To achieve the functionality of UPSERT, PostgreSQL uses the INSERT ON CONFLICT statement.

Syntax:
INSERT INTO table_name(column_list)  
VALUES(value_list)
ON CONFLICT target action;